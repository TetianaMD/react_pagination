{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","items","total","perPage","currentPage","onPageChange","totalPages","Math","ceil","arrayItem","startItem","endItem","pageChange","newPage","className","cn","disabled","href","onClick","undefined","map","page","active","slice","item","App","useState","setPerPage","setCurrentPage","min","length","id","value","onChange","e","Number","target","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"yLAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,E,2BCKIG,EAA8B,SAAC,GAMrC,IALLC,EAKI,EALJA,MACAC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,YACAC,EACI,EADJA,aAEMC,EAAaC,KAAKC,KAAKN,EAAQC,GAC/BM,EAAsBf,EAAW,EAAGY,GACpCI,GAAaN,EAAc,GAAKD,EAChCQ,EAAUP,EAAcD,EAExBS,EAAa,SAACC,GACdA,IAAYT,GACdC,EAAaQ,IAIjB,OACE,gCACE,qBAAIC,UAAU,aAAd,UACE,oBAAIA,UAAWC,IAAG,YAChB,CAAEC,SAA0B,IAAhBZ,IADd,SAGE,mBACE,UAAQ,WACRU,UAAU,YACVG,KAAK,QACL,gBAA+B,IAAhBb,EACfc,QAAyB,IAAhBd,EACL,kBAAMQ,EAAWR,EAAc,SAC/Be,EAPN,oBAaDV,EAAUW,KAAI,SAACC,GAAD,OACb,oBAEEP,UAAWC,IAAG,YAAa,CAAEO,OAAQD,IAASjB,IAFhD,SAIE,mBACE,UAAQ,WACRU,UAAU,YACVG,KAAK,QACLC,QAAS,kBAAMN,EAAWS,IAJ5B,SAMGA,KATEA,MAaT,oBAAIP,UAAWC,IAAG,YAChB,CAAEC,SAAUZ,IAAgBE,IAD9B,SAGE,mBACE,UAAQ,WACRQ,UAAU,YACVG,KAAK,QACL,gBAAeb,IAAgBE,EAC/BY,QAASd,IAAgBE,EACrB,kBAAMM,EAAWR,EAAc,SAC/Be,EAPN,uBAeJ,6BACGlB,EAAMsB,MAAMb,EAAWC,GAASS,KAAI,SAACI,GAAD,OACnC,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YC9EbvB,EAAQP,EAAW,EAAG,IACzB0B,KAAI,SAAAtB,GAAC,qBAAYA,MAEP2B,EAAgB,WAC3B,MAA8BC,mBAAiB,GAA/C,mBAAOvB,EAAP,KAAgBwB,EAAhB,KACA,EAAsCD,mBAAiB,GAAvD,mBAAOtB,EAAP,KAAoBwB,EAApB,KAMMlB,GAAaN,EAAc,GAAKD,EAChCQ,EAAUP,EAAcD,EAE9B,OACE,sBAAKW,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWV,EADX,mBACiCM,EAAY,EAD7C,cACoDH,KAAKsB,IAAIlB,EAASV,EAAM6B,QAD5E,OAC0F,GAD1F,OAIA,sBAAKhB,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRiB,GAAG,kBACHjB,UAAU,eACVkB,MAAO7B,EACP8B,SAAU,SAACC,GACTP,EAAWQ,OAAOD,EAAEE,OAAOJ,QAC3BJ,EAAe,IAPnB,UAUE,wBAAQI,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAd,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOK,QAAQ,kBAAkBvB,UAAU,qBAA3C,+BAMF,cAAC,EAAD,CACEb,MAAOA,EACPC,MAAO,GACPC,QAASA,EACTC,YAAaA,EACbC,aAAc,SAACQ,GAAD,OA7CD,SAACA,GAClBe,EAAef,GA4CgBD,CAAWC,UCvD9CyB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.62510e43.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { getNumbers } from '../../utils';\n\ntype Props = {\n  items: string[];\n  total: number;\n  perPage: number;\n  currentPage: number;\n  onPageChange: (value: number) => void\n};\n\nexport const Pagination: React.FC<Props> = ({\n  items,\n  total,\n  perPage,\n  currentPage,\n  onPageChange,\n}) => {\n  const totalPages = Math.ceil(total / perPage);\n  const arrayItem: number[] = getNumbers(1, totalPages);\n  const startItem = (currentPage - 1) * perPage;\n  const endItem = currentPage * perPage;\n\n  const pageChange = (newPage: number) => {\n    if (newPage !== currentPage) {\n      onPageChange(newPage);\n    }\n  };\n\n  return (\n    <div>\n      <ul className=\"pagination\">\n        <li className={cn('page-item',\n          { disabled: currentPage === 1 })}\n        >\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            aria-disabled={currentPage === 1}\n            onClick={currentPage !== 1\n              ? () => pageChange(currentPage - 1)\n              : undefined}\n\n          >\n            «\n          </a>\n        </li>\n        {arrayItem.map((page) => (\n          <li\n            key={page}\n            className={cn('page-item', { active: page === currentPage })}\n          >\n            <a\n              data-cy=\"pageLink\"\n              className=\"page-link\"\n              href=\"#prev\"\n              onClick={() => pageChange(page)}\n            >\n              {page}\n            </a>\n          </li>\n        ))}\n        <li className={cn('page-item',\n          { disabled: currentPage === totalPages })}\n        >\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled={currentPage === totalPages}\n            onClick={currentPage !== totalPages\n              ? () => pageChange(currentPage + 1)\n              : undefined}\n\n          >\n            »\n          </a>\n        </li>\n      </ul>\n\n      <ul>\n        {items.slice(startItem, endItem).map((item) => (\n          <li key={item} data-cy=\"item\">\n            {item}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const [perPage, setPerPage] = useState<number>(5);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n\n  const pageChange = (newPage: number) => {\n    setCurrentPage(newPage);\n  };\n\n  const startItem = (currentPage - 1) * perPage;\n  const endItem = currentPage * perPage;\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${startItem + 1} - ${Math.min(endItem, items.length)} of ${42})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPage}\n            onChange={(e) => {\n              setPerPage(Number(e.target.value));\n              setCurrentPage(1);\n            }}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\">5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      {/* Move this markup to Pagination */}\n      <Pagination\n        items={items}\n        total={42} // total number of items to paginate\n        perPage={perPage} // number of items per page\n        currentPage={currentPage} /* optional with 1 by default */\n        onPageChange={(newPage) => pageChange(newPage)}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}